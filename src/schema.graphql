# Date without time, serialized as a YYYY-MM-DD string
scalar DateOnly

# Date and time, serialized as an ISO date string
scalar DateTime

#A notable person's label, e.g. Liberal, Democrat
type Label {
  id: ID!
  text: String!
  createdAt: String!
}

# A comment on a notable person's event
type EventComment {
  ownerId: ID!
  photoUrl: String
  text: String!
}

# An event about a notable person, must have a source link
type Event {
  id: ID!
  quote: String!
  isQuoteByNotablePerson: Boolean!
  sourceUrl: String!
  # The date and time the event was added to the database
  postedAt: DateTime!
  # The date the event happened
  happenedOn: DateOnly!
  comments: [EventComment!]
}

# A public figure or an influential person
type NotablePerson {
  # The part of the URL to that notable person's page, e.g. Tom_Hanks
  slug: String!
  name: String!
  photoUrl: String!
  events: [Event!]!
  labels: [Label!]!
}

interface UserInterface {
  id: ID!
  name: String!
  photoUrl: String
}

type User implements UserInterface {
  id: ID!
  name: String!
  photoUrl: String
}

# The authenticated user performing the request
type Viewer implements UserInterface {
  id: ID!
  name: String!
  email: String!
  signedUpAt: DateTime!
  photoUrl: String
}

type RootQuery {
  viewer(fbAccessToken: String!): Viewer
  notablePerson(slug: String!): NotablePerson
}

input CreateUserInput {
  fbAccessToken: String!
}

type RootMutation {
  # Sign up
  createUser(data: CreateUserInput!): User
}

schema {
  query: RootQuery
  mutation: RootMutation
}
