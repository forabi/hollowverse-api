# Date without time, serialized as a YYYY-MM-DD string
scalar DateOnly

# Date and time, serialized as an ISO date string
scalar DateTime

# A valid email address
scalar Email

# A full URL with the protocol. Accepted protocols are http and https only.
scalar Url

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

#A notable person's label, e.g. Liberal, Democrat
type Label {
  id: ID!
  text: String!
  createdAt: DateTime!
}

# A comment on a notable person's event
type EventComment implements Node {
  id: ID!
  ownerId: ID!
  photoUrl: Url
  text: String!
}

# An event about a notable person, must have a source link
type NotablePersonEvent implements Node {
  id: ID!
  quote: String!
  isQuoteByNotablePerson: Boolean!
  sourceUrl: String!
  # The date and time the event was added to the database
  postedAt: DateTime!
  # The date the event happened
  happenedOn: DateOnly!
  comments: [EventComment!]!
}

type EventCommentConnection {
  edges: [EventCommentEdge]
  pageInfo: PageInfo!
}

type EventCommentEdge {
  cursor: String!
  node: EventComment
}

type NotablePersonEventConnection {
  edges: [NotablePersonEventEdge]
  pageInfo: PageInfo!
}

type NotablePersonEventEdge {
  cursor: String!
  node: NotablePersonEvent
}

# A public figure or an influential person
type NotablePerson implements Node {
  id: ID!
  # The part of the URL to that notable person's page, e.g. Tom_Hanks
  slug: String!
  name: String!
  photoUrl: Url!
  events: [NotablePersonEvent!]!
  labels: [Label!]!
}

interface UserInterface {
  id: ID!
  name: String!
  photoUrl: Url
}

type User implements UserInterface {
  id: ID!
  name: String!
  photoUrl: Url
}

# The authenticated user performing the request
#
# The authentication token must be passed
# in the HTTP `Authorization` header. The token type must be `Bearer` and the
# token value is a valid Facebook access token issued for the Hollowverse
# application.
type Viewer implements UserInterface {
  id: ID!
  name: String!
  photoUrl: Url
  email: Email
  signedUpAt: DateTime!
}

type CreateUserPayload {
  clientMutationId: String!
  name: String!
  signedUpAt: DateTime!
}

type RootQuery {
  # The authenticated user performing the request
  viewer: Viewer
  notablePerson(slug: String!): NotablePerson
  # Fetch any object that implements the Node interface. Required for Relay compliance.
  node(id: ID!): Node
}

input CreateUserInput {
  fbAccessToken: String!
  # Optional email address to override the one obtained from Facebook
  email: Email
  # Optional name to override the one obtained from Facebook
  name: String
}

type RootMutation {
  # Create a new user passing using a valid Facebook access token
  # issued for the Hollowverse application.
  # The name and email of the new user will be obtained from Facebook if
  # not specified in the mutation input.
  createUser(input: CreateUserInput!): CreateUserPayload
}

schema {
  query: RootQuery
  mutation: RootMutation
}

enum ApiErrorType {
  # Thrown when an operation requires that the request is not authenticated
  MustNotBeAuthorizedError
  # Thrown when an access token is empty, invalid or expired
  InvalidAccessTokenError
}
