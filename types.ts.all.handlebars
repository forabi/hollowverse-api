
/* tslint:disable */
{{#each scalars}}

/** {{ description }} */
export type {{ name }} = any;
{{/each}}

/** Input types */

{{#each inputTypes}}
/** {{ description }} */
export interface {{ name }}{{#if hasInterfaces}} extends {{#each interfaces}}{{this}}{{#unless @last}},{{/unless}}{{/each}}{{/if}} {
{{#each fields}}
  /** {{ description }} */
  {{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}};
{{/each}}
}
{{/each}}

{{#each types}}
/** {{ description }} */
export interface {{ name }}{{#if hasInterfaces}} extends {{#each interfaces}}{{this}}{{#unless @last}},{{/unless}}{{/each}}{{/if}} {
{{#each fields}}
  /** {{ description }} */
  {{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}};
{{/each}}
}
{{/each}}

{{~#each types}}
  {{~#each fields}}
    {{~# if hasArguments }}
export interface {{ toPascalCase name }}{{ toPascalCase ../name }}Args {
{{#each arguments}}

  /** {{ description }} */
  {{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}};
{{/each}}
}
    {{/if}}
  {{/each}}
{{/each}}
{{#each enums}}

/** {{ description }} */
export type {{ name }} = {{#each values }}"{{ value }}"{{#unless @last}} | {{/unless}}{{/each}};

{{/each}}
{{#each unions}}

/** {{ description }} */
export type {{ name }} = {{#each possibleTypes}}{{this}}{{#unless @last}} | {{/unless}}{{/each}};

{{/each}}

export type TypesMap = {
{{#each types}}
  {{ name }}: {
    returnType: {{ name }};
    argsByField: {
    {{#each fields}}
      {{ name }}: {{# if hasArguments }}{{ toPascalCase name }}{{ toPascalCase ../name }}Args{{else}}{ }{{/if}};
    {{/each}}
    };
  };
{{/each}}
};
