# Date without time, serialized as a YYYY-MM-DD string
scalar DateOnly

# Date and time, serialized as an ISO date string
scalar DateTime

# A valid email address
scalar Email

# A full URL with the protocol. Accepted protocols are http and https only.
scalar Url

# A notable person's label, e.g. Liberal, Democrat
type Label {
  id: ID!
  text: String!
  createdAt: DateTime!
}

# A comment on a notable person's event
type NotablePersonEventComment {
  id: ID!
  owner: User!
  text: String!
}

# A event's label, e.g. democracy, philosophy
type EventLabel {
  id: ID!
  text: String!
  createdAt: DateTime!
}

enum NotablePersonEventType {
  quote
  donation
  appearance
}

enum EditorialSummaryNodeType {
  quote
  heading
  paragraph
  text
  emphasis
  link
}

type EditorialSummaryNode {
  id: ID!
  type: EditorialSummaryNodeType!
  text: String
  sourceUrl: Url
  sourceTitle: String
  parentId: ID
}

# An event about a notable person, must have a source link
type NotablePersonEvent {
  id: ID!
  type: NotablePersonEventType!
  quote: String
  isQuoteByNotablePerson: Boolean
  sourceUrl: String!

  # The date the event happened
  happenedOn: DateOnly

  # The date and time the event was added to the database
  postedAt: DateTime!

  # an organization, a campaign, a political event... etc.
  organizationName: String

  # the official website of the organization, campaign, political event... etc., if any
  organizationWebsiteUrl: String

  labels: [EventLabel!]!
  comments: [NotablePersonEventComment!]
    @deprecated(
      reason: "We decided to remove events on comments in favor of Facebook comments. See https://github.com/hollowverse/hollowverse/issues/207 for discussion."
    )
}

type EditorialSummary {
  id: ID!
  nodes: [EditorialSummaryNode!]!
  author: String!
  lastUpdatedOn: DateOnly
}

type Photo {
  id: ID!
  url: Url!
  sourceUrl: Url!
  isAttibutionRequired: Boolean
  isCopyrighted: Boolean
  artist: String
  license: String
  credits: String
}

input EventsQueryInput {
  type: NotablePersonEventType
}

# A public figure or an influential person
type NotablePerson {
  # The part of the URL to that notable person's page, e.g. Tom_Hanks
  slug: String!

  name: String!

  photoUrl: Url
    @deprecated(
      reason: "A notable person can now have multiple photos. Use `mainPhoto` instead."
    )

  mainPhoto: Photo

  events(query: EventsQueryInput): [NotablePersonEvent!]!
  labels: [Label!]!
  summary: String

  # This is used to load Facebook comments on the client.
  #
  # This should be treated as an opaque value because the protocol and path parts
  # of this URL might be different depending on whether the notable person
  # was imported from the old Hollowverse website or not. The trailing slash may
  # also be included or removed.
  #
  # Example: http://hollowverse.com/tom-hanks/ or https://hollowverse.com/Bill_Gates
  commentsUrl: String!

  # The content from the old Hollowverse
  editorialSummary: EditorialSummary

  relatedPeople: [NotablePerson!]!
}

interface UserInterface {
  id: ID!
  name: String!
  photoUrl: Url
}

type User implements UserInterface {
  id: ID!
  name: String!
  photoUrl: Url
}

# The authenticated user performing the request
#
# The authentication token must be passed
# in the HTTP `Authorization` header. The token type must be `Bearer` and the
# token value is a valid Facebook access token issued for the Hollowverse
# application.
type Viewer implements UserInterface {
  id: ID!
  name: String!
  photoUrl: Url
  email: Email
  signedUpAt: DateTime!
}

type PageInfo {
  hasNextPage: Boolean!
}

type NotablePersonEdge {
  cursor: ID!
  node: NotablePerson!
}

type NotablePersonConnection {
  edges: [NotablePersonEdge!]!
  pageInfo: PageInfo!
}

type RootQuery {
  # The authenticated user performing the request
  viewer: Viewer

  notablePerson(slug: String!): NotablePerson

  # Explore notable people
  notablePeople(first: Int!, after: ID): NotablePersonConnection!
}

input CreateUserInput {
  fbAccessToken: String!

  # Optional email address to override the one obtained from Facebook
  email: Email

  # Optional name to override the one obtained from Facebook
  name: String
}

input CreateNotablePersonInput {
  slug: String!
  name: String!
}

type CreateNotablePersonPayload {
  name: String!
}

type RootMutation {
  # Create a new user using a valid Facebook access token
  # issued for the Hollowverse application.
  # The name of the new user will be obtained from Facebook if
  # not specified in the mutation input.
  createUser(input: CreateUserInput!): Viewer

  # Create a new entry for a notable person
  createNotablePerson(
    input: CreateNotablePersonInput!
  ): CreateNotablePersonPayload
}

schema {
  query: RootQuery
  mutation: RootMutation
}

enum ApiErrorType {
  # Thrown when an operation requires that the request is authorized
  MustBeAuthorizedError

  OperationNotAllowedError

  # Thrown when an access token is empty, invalid or expired
  InvalidAccessTokenError
}
